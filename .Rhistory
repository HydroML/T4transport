ones_n = matrix(rep(1,m),nrow=1)
plan   = CVXR::Variable(m,n)
wd.obj    <- CVXR::Minimize(CVXR::matrix_trace(t(cxy)%*%plan))
wd.const1 <- list(plan >= 0)
wd.const2 <- list(plan%*%ones_m==ww_m, ones_n%*%plan==ww_n)
wd.prob   <- CVXR::Problem(wd.obj, c(wd.const1, wd.const2))
wd.solve  <- CVXR::solve(wd.prob)
gamma <- wd.solve$getValue(plan)
value <- (base::sum(gamma*cxy)^(1/p))
mm = sample(30:50, 1)
nn = sample(30:50, 1)
X = matrix(rnorm(mm*2, mean=-1),ncol=2)
Y = matrix(rnorm(nn*2, mean=+1),ncol=2)
dxy = array(0,c(mm,nn))
for (i in 1:mm){
for (j in 1:nn){
dxy[i,j] <- sqrt(sum((as.vector(X[i,])-as.vector(Y[j,]))^2))
}
}
wx = rep(1/mm, mm)
wy = rep(1/nn, nn)
p  = 2
cxy = (dxy^p)
m   = length(wx); ww_m = matrix(wx, ncol=1)
n   = length(wy); ww_n = matrix(wy, nrow=1)
ones_m = matrix(rep(1,n),ncol=1)
ones_n = matrix(rep(1,m),nrow=1)
plan   = CVXR::Variable(m,n)
wd.obj    <- CVXR::Minimize(CVXR::matrix_trace(t(cxy)%*%plan))
wd.const1 <- list(plan >= 0)
wd.const2 <- list(plan%*%ones_m==ww_m, ones_n%*%plan==ww_n)
wd.prob   <- CVXR::Problem(wd.obj, c(wd.const1, wd.const2))
wd.solve  <- CVXR::solve(wd.prob)
gamma <- wd.solve$getValue(plan)
value <- (base::sum(gamma*cxy)^(1/p))
mm = sample(30:50, 1)
nn = sample(30:50, 1)
X = matrix(rnorm(mm*2, mean=-1),ncol=2)
Y = matrix(rnorm(nn*2, mean=+1),ncol=2)
dxy = array(0,c(mm,nn))
for (i in 1:mm){
for (j in 1:nn){
dxy[i,j] <- sqrt(sum((as.vector(X[i,])-as.vector(Y[j,]))^2))
}
}
wx = rep(1/mm, mm)
wy = rep(1/nn, nn)
p  = 2
cxy = (dxy^p)
m   = length(wx); ww_m = matrix(wx, ncol=1)
n   = length(wy); ww_n = matrix(wy, nrow=1)
ones_m = matrix(rep(1,n),ncol=1)
ones_n = matrix(rep(1,m),nrow=1)
plan   = CVXR::Variable(m,n)
wd.obj    <- CVXR::Minimize(CVXR::matrix_trace(t(cxy)%*%plan))
wd.const1 <- list(plan >= 0)
wd.const2 <- list(plan%*%ones_m==ww_m, ones_n%*%plan==ww_n)
wd.prob   <- CVXR::Problem(wd.obj, c(wd.const1, wd.const2))
wd.solve  <- CVXR::solve(wd.prob)
gamma <- wd.solve$getValue(plan)
value <- (base::sum(gamma*cxy)^(1/p))
mm = sample(30:50, 1)
nn = sample(30:50, 1)
X = matrix(rnorm(mm*2, mean=-1),ncol=2)
Y = matrix(rnorm(nn*2, mean=+1),ncol=2)
dxy = array(0,c(mm,nn))
for (i in 1:mm){
for (j in 1:nn){
dxy[i,j] <- sqrt(sum((as.vector(X[i,])-as.vector(Y[j,]))^2))
}
}
wx = rep(1/mm, mm)
wy = rep(1/nn, nn)
p  = 2
cxy = (dxy^p)
m   = length(wx); ww_m = matrix(wx, ncol=1)
n   = length(wy); ww_n = matrix(wy, nrow=1)
ones_m = matrix(rep(1,n),ncol=1)
ones_n = matrix(rep(1,m),nrow=1)
plan   = CVXR::Variable(m,n)
wd.obj    <- CVXR::Minimize(CVXR::matrix_trace(t(cxy)%*%plan))
wd.const1 <- list(plan >= 0)
wd.const2 <- list(plan%*%ones_m==ww_m, ones_n%*%plan==ww_n)
wd.prob   <- CVXR::Problem(wd.obj, c(wd.const1, wd.const2))
wd.solve  <- CVXR::solve(wd.prob)
gamma <- wd.solve$getValue(plan)
value <- (base::sum(gamma*cxy)^(1/p))
mm = sample(30:50, 1)
nn = sample(30:50, 1)
X = matrix(rnorm(mm*2, mean=-1),ncol=2)
Y = matrix(rnorm(nn*2, mean=+1),ncol=2)
dxy = array(0,c(mm,nn))
for (i in 1:mm){
for (j in 1:nn){
dxy[i,j] <- sqrt(sum((as.vector(X[i,])-as.vector(Y[j,]))^2))
}
}
wx = rep(1/mm, mm)
wy = rep(1/nn, nn)
p  = 2
cxy = (dxy^p)
m   = length(wx); ww_m = matrix(wx, ncol=1)
n   = length(wy); ww_n = matrix(wy, nrow=1)
ones_m = matrix(rep(1,n),ncol=1)
ones_n = matrix(rep(1,m),nrow=1)
plan   = CVXR::Variable(m,n)
wd.obj    <- CVXR::Minimize(CVXR::matrix_trace(t(cxy)%*%plan))
wd.const1 <- list(plan >= 0)
wd.const2 <- list(plan%*%ones_m==ww_m, ones_n%*%plan==ww_n)
wd.prob   <- CVXR::Problem(wd.obj, c(wd.const1, wd.const2))
wd.solve  <- CVXR::solve(wd.prob)
gamma <- wd.solve$getValue(plan)
value <- (base::sum(gamma*cxy)^(1/p))
mm = sample(30:50, 1)
nn = sample(30:50, 1)
X = matrix(rnorm(mm*2, mean=-1),ncol=2)
Y = matrix(rnorm(nn*2, mean=+1),ncol=2)
dxy = array(0,c(mm,nn))
for (i in 1:mm){
for (j in 1:nn){
dxy[i,j] <- sqrt(sum((as.vector(X[i,])-as.vector(Y[j,]))^2))
}
}
wx = rep(1/mm, mm)
wy = rep(1/nn, nn)
p  = 2
cxy = (dxy^p)
m   = length(wx); ww_m = matrix(wx, ncol=1)
n   = length(wy); ww_n = matrix(wy, nrow=1)
ones_m = matrix(rep(1,n),ncol=1)
ones_n = matrix(rep(1,m),nrow=1)
plan   = CVXR::Variable(m,n)
wd.obj    <- CVXR::Minimize(CVXR::matrix_trace(t(cxy)%*%plan))
wd.const1 <- list(plan >= 0)
wd.const2 <- list(plan%*%ones_m==ww_m, ones_n%*%plan==ww_n)
wd.prob   <- CVXR::Problem(wd.obj, c(wd.const1, wd.const2))
wd.solve  <- CVXR::solve(wd.prob)
gamma <- wd.solve$getValue(plan)
value <- (base::sum(gamma*cxy)^(1/p))
mm = sample(30:50, 1)
nn = sample(30:50, 1)
X = matrix(rnorm(mm*2, mean=-1),ncol=2)
Y = matrix(rnorm(nn*2, mean=+1),ncol=2)
dxy = array(0,c(mm,nn))
for (i in 1:mm){
for (j in 1:nn){
dxy[i,j] <- sqrt(sum((as.vector(X[i,])-as.vector(Y[j,]))^2))
}
}
wx = rep(1/mm, mm)
wy = rep(1/nn, nn)
p  = 2
cxy = (dxy^p)
m   = length(wx); ww_m = matrix(wx, ncol=1)
n   = length(wy); ww_n = matrix(wy, nrow=1)
ones_m = matrix(rep(1,n),ncol=1)
ones_n = matrix(rep(1,m),nrow=1)
plan   = CVXR::Variable(m,n)
wd.obj    <- CVXR::Minimize(CVXR::matrix_trace(t(cxy)%*%plan))
wd.const1 <- list(plan >= 0)
wd.const2 <- list(plan%*%ones_m==ww_m, ones_n%*%plan==ww_n)
wd.prob   <- CVXR::Problem(wd.obj, c(wd.const1, wd.const2))
wd.solve  <- CVXR::solve(wd.prob)
gamma <- wd.solve$getValue(plan)
value <- (base::sum(gamma*cxy)^(1/p))
mm = sample(30:50, 1)
nn = sample(30:50, 1)
X = matrix(rnorm(mm*2, mean=-1),ncol=2)
Y = matrix(rnorm(nn*2, mean=+1),ncol=2)
dxy = array(0,c(mm,nn))
for (i in 1:mm){
for (j in 1:nn){
dxy[i,j] <- sqrt(sum((as.vector(X[i,])-as.vector(Y[j,]))^2))
}
}
wx = rep(1/mm, mm)
wy = rep(1/nn, nn)
p  = 2
cxy = (dxy^p)
m   = length(wx); ww_m = matrix(wx, ncol=1)
n   = length(wy); ww_n = matrix(wy, nrow=1)
ones_m = matrix(rep(1,n),ncol=1)
ones_n = matrix(rep(1,m),nrow=1)
plan   = CVXR::Variable(m,n)
wd.obj    <- CVXR::Minimize(CVXR::matrix_trace(t(cxy)%*%plan))
wd.const1 <- list(plan >= 0)
wd.const2 <- list(plan%*%ones_m==ww_m, ones_n%*%plan==ww_n)
wd.prob   <- CVXR::Problem(wd.obj, c(wd.const1, wd.const2))
wd.solve  <- CVXR::solve(wd.prob)
gamma <- wd.solve$getValue(plan)
value <- (base::sum(gamma*cxy)^(1/p))
mm = sample(30:50, 1)
nn = sample(30:50, 1)
X = matrix(rnorm(mm*2, mean=-1),ncol=2)
Y = matrix(rnorm(nn*2, mean=+1),ncol=2)
dxy = array(0,c(mm,nn))
for (i in 1:mm){
for (j in 1:nn){
dxy[i,j] <- sqrt(sum((as.vector(X[i,])-as.vector(Y[j,]))^2))
}
}
wx = rep(1/mm, mm)
wy = rep(1/nn, nn)
p  = 2
cxy = (dxy^p)
m   = length(wx); ww_m = matrix(wx, ncol=1)
n   = length(wy); ww_n = matrix(wy, nrow=1)
ones_m = matrix(rep(1,n),ncol=1)
ones_n = matrix(rep(1,m),nrow=1)
plan   = CVXR::Variable(m,n)
wd.obj    <- CVXR::Minimize(CVXR::matrix_trace(t(cxy)%*%plan))
wd.const1 <- list(plan >= 0)
wd.const2 <- list(plan%*%ones_m==ww_m, ones_n%*%plan==ww_n)
wd.prob   <- CVXR::Problem(wd.obj, c(wd.const1, wd.const2))
wd.solve  <- CVXR::solve(wd.prob)
gamma <- wd.solve$getValue(plan)
value <- (base::sum(gamma*cxy)^(1/p))
mm = sample(30:50, 1)
nn = sample(30:50, 1)
X = matrix(rnorm(mm*2, mean=-1),ncol=2)
Y = matrix(rnorm(nn*2, mean=+1),ncol=2)
dxy = array(0,c(mm,nn))
for (i in 1:mm){
for (j in 1:nn){
dxy[i,j] <- sqrt(sum((as.vector(X[i,])-as.vector(Y[j,]))^2))
}
}
wx = rep(1/mm, mm)
wy = rep(1/nn, nn)
p  = 2
cxy = (dxy^p)
m   = length(wx); ww_m = matrix(wx, ncol=1)
n   = length(wy); ww_n = matrix(wy, nrow=1)
ones_m = matrix(rep(1,n),ncol=1)
ones_n = matrix(rep(1,m),nrow=1)
plan   = CVXR::Variable(m,n)
wd.obj    <- CVXR::Minimize(CVXR::matrix_trace(t(cxy)%*%plan))
wd.const1 <- list(plan >= 0)
wd.const2 <- list(plan%*%ones_m==ww_m, ones_n%*%plan==ww_n)
wd.prob   <- CVXR::Problem(wd.obj, c(wd.const1, wd.const2))
wd.solve  <- CVXR::solve(wd.prob)
gamma <- wd.solve$getValue(plan)
value <- (base::sum(gamma*cxy)^(1/p))
mm = sample(30:50, 1)
nn = sample(30:50, 1)
X = matrix(rnorm(mm*2, mean=-1),ncol=2)
Y = matrix(rnorm(nn*2, mean=+1),ncol=2)
dxy = array(0,c(mm,nn))
for (i in 1:mm){
for (j in 1:nn){
dxy[i,j] <- sqrt(sum((as.vector(X[i,])-as.vector(Y[j,]))^2))
}
}
wx = rep(1/mm, mm)
wy = rep(1/nn, nn)
p  = 2
cxy = (dxy^p)
m   = length(wx); ww_m = matrix(wx, ncol=1)
n   = length(wy); ww_n = matrix(wy, nrow=1)
ones_m = matrix(rep(1,n),ncol=1)
ones_n = matrix(rep(1,m),nrow=1)
plan   = CVXR::Variable(m,n)
wd.obj    <- CVXR::Minimize(CVXR::matrix_trace(t(cxy)%*%plan))
wd.const1 <- list(plan >= 0)
wd.const2 <- list(plan%*%ones_m==ww_m, ones_n%*%plan==ww_n)
wd.prob   <- CVXR::Problem(wd.obj, c(wd.const1, wd.const2))
wd.solve  <- CVXR::solve(wd.prob)
gamma <- wd.solve$getValue(plan)
value <- (base::sum(gamma*cxy)^(1/p))
mm = sample(30:50, 1)
nn = sample(30:50, 1)
X = matrix(rnorm(mm*2, mean=-1),ncol=2)
Y = matrix(rnorm(nn*2, mean=+1),ncol=2)
dxy = array(0,c(mm,nn))
for (i in 1:mm){
for (j in 1:nn){
dxy[i,j] <- sqrt(sum((as.vector(X[i,])-as.vector(Y[j,]))^2))
}
}
wx = rep(1/mm, mm)
wy = rep(1/nn, nn)
p  = 2
cxy = (dxy^p)
m   = length(wx); ww_m = matrix(wx, ncol=1)
n   = length(wy); ww_n = matrix(wy, nrow=1)
ones_m = matrix(rep(1,n),ncol=1)
ones_n = matrix(rep(1,m),nrow=1)
plan   = CVXR::Variable(m,n)
wd.obj    <- CVXR::Minimize(CVXR::matrix_trace(t(cxy)%*%plan))
wd.const1 <- list(plan >= 0)
wd.const2 <- list(plan%*%ones_m==ww_m, ones_n%*%plan==ww_n)
wd.prob   <- CVXR::Problem(wd.obj, c(wd.const1, wd.const2))
wd.solve  <- CVXR::solve(wd.prob)
gamma <- wd.solve$getValue(plan)
value <- (base::sum(gamma*cxy)^(1/p))
rm(list=ls())
library(T4transport)
niter = 1000          # number of iterations
vdist = rep(0,niter)
for (i in 1:niter){
mm = sample(30:50, 1)
nn = sample(30:50, 1)
X = matrix(rnorm(mm*2, mean=-1),ncol=2)
Y = matrix(rnorm(nn*2, mean=+1),ncol=2)
vdist[i] = wasserstein(X, Y, p=2)$distance
if (i%%10 == 0){
print(paste0("iteration ",i,"/", niter," complete."))
}
}
# Visualize
opar <- par(no.readonly=TRUE)
hist(vdist, main="Monte Carlo Simulation")
abline(v=sqrt(8), lwd=2, col="red")
par(opar)
mm = sample(30:50, 1)
nn = sample(30:50, 1)
X = matrix(rnorm(mm*2, mean=-1),ncol=2)
Y = matrix(rnorm(nn*2, mean=+1),ncol=2)
dxy = array(0,c(mm,nn))
for (i in 1:mm){
for (j in 1:nn){
dxy[i,j] <- sqrt(sum((as.vector(X[i,])-as.vector(Y[j,]))^2))
}
}
wx = rep(1/mm, mm)
wy = rep(1/nn, nn)
p  = 2
cxy = (dxy^p)
m   = length(wx); ww_m = matrix(wx, ncol=1)
n   = length(wy); ww_n = matrix(wy, nrow=1)
ones_m = matrix(rep(1,n),ncol=1)
ones_n = matrix(rep(1,m),nrow=1)
plan   = CVXR::Variable(m,n)
wd.obj    <- CVXR::Minimize(CVXR::matrix_trace(t(cxy)%*%plan))
wd.const1 <- list(plan >= 0)
wd.const2 <- list(plan%*%ones_m==ww_m, ones_n%*%plan==ww_n)
wd.prob   <- CVXR::Problem(wd.obj, c(wd.const1, wd.const2))
wd.solve  <- CVXR::solve(wd.prob)
wd.solve$status
wd.solve
rm(list=ls())
library(T4transport)
niter = 1000          # number of iterations
vdist = rep(0,niter)
for (i in 1:niter){
mm = sample(30:50, 1)
nn = sample(30:50, 1)
X = matrix(rnorm(mm*2, mean=-1),ncol=2)
Y = matrix(rnorm(nn*2, mean=+1),ncol=2)
vdist[i] = wasserstein(X, Y, p=2)$distance
if (i%%10 == 0){
print(paste0("iteration ",i,"/", niter," complete."))
}
}
# Visualize
opar <- par(no.readonly=TRUE)
hist(vdist, main="Monte Carlo Simulation")
abline(v=sqrt(8), lwd=2, col="red")
par(opar)
10%%2
testrec <- function(x){
if (x%%2==0){
return(x+1)
} else {
print("recursive")
return(testrec(x))
}
}
testrec(1)
testrec <- function(x){
if (x%%2==0){
return(x+1)
} else {
print("recursive")
return(testrec(x+1))
}
}
testrec(1)
testrec(2)
rm(list=ls())
library(T4transport)
mm = sample(30:50, 1)
nn = sample(30:50, 1)
X = matrix(rnorm(mm*2, mean=-1),ncol=2)
Y = matrix(rnorm(nn*2, mean=+1),ncol=2)
dxy = array(0,c(mm,nn))
for (i in 1:mm){
for (j in 1:nn){
dxy[i,j] <- sqrt(sum((as.vector(X[i,])-as.vector(Y[j,]))^2))
}
}
wx = rep(1/mm, mm)
wy = rep(1/nn, nn)
p  = 2
cxy = (dxy^p)
m   = length(wx); ww_m = matrix(wx, ncol=1)
n   = length(wy); ww_n = matrix(wy, nrow=1)
ones_m = matrix(rep(1,n),ncol=1)
ones_n = matrix(rep(1,m),nrow=1)
plan   = CVXR::Variable(m,n)
wd.obj    <- CVXR::Minimize(CVXR::matrix_trace(t(cxy)%*%plan))
wd.const1 <- list(plan >= 0)
wd.const2 <- list(plan%*%ones_m==ww_m, ones_n%*%plan==ww_n)
wd.prob   <- CVXR::Problem(wd.obj, c(wd.const1, wd.const2))
wd.solve  <- CVXR::solve(wd.prob)
wd.solve$solver
mm = sample(30:50, 1)
nn = sample(30:50, 1)
X = matrix(rnorm(mm*2, mean=-1),ncol=2)
Y = matrix(rnorm(nn*2, mean=+1),ncol=2)
dxy = array(0,c(mm,nn))
for (i in 1:mm){
for (j in 1:nn){
dxy[i,j] <- sqrt(sum((as.vector(X[i,])-as.vector(Y[j,]))^2))
}
}
wx = rep(1/mm, mm)
wy = rep(1/nn, nn)
p  = 2
cxy = (dxy^p)
m   = length(wx); ww_m = matrix(wx, ncol=1)
n   = length(wy); ww_n = matrix(wy, nrow=1)
ones_m = matrix(rep(1,n),ncol=1)
ones_n = matrix(rep(1,m),nrow=1)
plan   = CVXR::Variable(m,n)
wd.obj    <- CVXR::Minimize(CVXR::matrix_trace(t(cxy)%*%plan))
wd.const1 <- list(plan >= 0)
wd.const2 <- list(plan%*%ones_m==ww_m, ones_n%*%plan==ww_n)
wd.prob   <- CVXR::Problem(wd.obj, c(wd.const1, wd.const2))
wd.solve  <- CVXR::solve(wd.prob)
wd.solve$solver
mm = sample(30:50, 1)
nn = sample(30:50, 1)
X = matrix(rnorm(mm*2, mean=-1),ncol=2)
Y = matrix(rnorm(nn*2, mean=+1),ncol=2)
dxy = array(0,c(mm,nn))
for (i in 1:mm){
for (j in 1:nn){
dxy[i,j] <- sqrt(sum((as.vector(X[i,])-as.vector(Y[j,]))^2))
}
}
wx = rep(1/mm, mm)
wy = rep(1/nn, nn)
p  = 2
cxy = (dxy^p)
m   = length(wx); ww_m = matrix(wx, ncol=1)
n   = length(wy); ww_n = matrix(wy, nrow=1)
ones_m = matrix(rep(1,n),ncol=1)
ones_n = matrix(rep(1,m),nrow=1)
plan   = CVXR::Variable(m,n)
wd.obj    <- CVXR::Minimize(CVXR::matrix_trace(t(cxy)%*%plan))
wd.const1 <- list(plan >= 0)
wd.const2 <- list(plan%*%ones_m==ww_m, ones_n%*%plan==ww_n)
wd.prob   <- CVXR::Problem(wd.obj, c(wd.const1, wd.const2))
wd.solve  <- CVXR::solve(wd.prob, solver="OSQP")
mm = sample(30:50, 1)
nn = sample(30:50, 1)
X = matrix(rnorm(mm*2, mean=-1),ncol=2)
Y = matrix(rnorm(nn*2, mean=+1),ncol=2)
dxy = array(0,c(mm,nn))
for (i in 1:mm){
for (j in 1:nn){
dxy[i,j] <- sqrt(sum((as.vector(X[i,])-as.vector(Y[j,]))^2))
}
}
wx = rep(1/mm, mm)
wy = rep(1/nn, nn)
p  = 2
cxy = (dxy^p)
m   = length(wx); ww_m = matrix(wx, ncol=1)
n   = length(wy); ww_n = matrix(wy, nrow=1)
ones_m = matrix(rep(1,n),ncol=1)
ones_n = matrix(rep(1,m),nrow=1)
plan   = CVXR::Variable(m,n)
wd.obj    <- CVXR::Minimize(CVXR::matrix_trace(t(cxy)%*%plan))
wd.const1 <- list(plan >= 0)
wd.const2 <- list(plan%*%ones_m==ww_m, ones_n%*%plan==ww_n)
wd.prob   <- CVXR::Problem(wd.obj, c(wd.const1, wd.const2))
wd.solve  <- CVXR::solve(wd.prob, solver="OSQP")
rm(list=ls())
rm(list=ls())
library(T4transport)
devtools::install_github("rendrikson/gwDist")
help(Rglpk)
??Rglpk
install.packages("Rglpk")
library(T4transport)
pkgdown::build_site()
library(T4transport)
pkgdown::build_site()
install.packages("ragg")
install.packages("textshaping")
install.packages("textshaping")
install.packages("ragg")
pkgdown::build_site()
library(reticulate)
help(import)
sys <- import("sys")
sys
sss <- import("pytorch")
sss
class(sss)
sss <- tryCatch(reticulate::import("pytorch"))
sss <- tryCatch({reticulate::import("pytorch")},
error = function(e){
print("not installed")
})
X = matrix(rnorm(10*4),ncol=4)
eigen(cor(X))$values
eigen(cov(X))$values
pyX = reticulate::r_to_py(X)
pyX
