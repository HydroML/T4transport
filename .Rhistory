wd.obj    <- CVXR::Minimize(CVXR::matrix_trace(t(cxy)%*%plan))
wd.const1 <- list(plan >= 0)
wd.const2 <- list(plan%*%ones_m==ww_m, ones_n%*%plan==ww_n)
wd.prob   <- CVXR::Problem(wd.obj, c(wd.const1, wd.const2))
wd.solve  <- CVXR::solve(wd.prob)
wd.solve$solver
mm = sample(30:50, 1)
nn = sample(30:50, 1)
X = matrix(rnorm(mm*2, mean=-1),ncol=2)
Y = matrix(rnorm(nn*2, mean=+1),ncol=2)
dxy = array(0,c(mm,nn))
for (i in 1:mm){
for (j in 1:nn){
dxy[i,j] <- sqrt(sum((as.vector(X[i,])-as.vector(Y[j,]))^2))
}
}
wx = rep(1/mm, mm)
wy = rep(1/nn, nn)
p  = 2
cxy = (dxy^p)
m   = length(wx); ww_m = matrix(wx, ncol=1)
n   = length(wy); ww_n = matrix(wy, nrow=1)
ones_m = matrix(rep(1,n),ncol=1)
ones_n = matrix(rep(1,m),nrow=1)
plan   = CVXR::Variable(m,n)
wd.obj    <- CVXR::Minimize(CVXR::matrix_trace(t(cxy)%*%plan))
wd.const1 <- list(plan >= 0)
wd.const2 <- list(plan%*%ones_m==ww_m, ones_n%*%plan==ww_n)
wd.prob   <- CVXR::Problem(wd.obj, c(wd.const1, wd.const2))
wd.solve  <- CVXR::solve(wd.prob)
wd.solve$solver
mm = sample(30:50, 1)
nn = sample(30:50, 1)
X = matrix(rnorm(mm*2, mean=-1),ncol=2)
Y = matrix(rnorm(nn*2, mean=+1),ncol=2)
dxy = array(0,c(mm,nn))
for (i in 1:mm){
for (j in 1:nn){
dxy[i,j] <- sqrt(sum((as.vector(X[i,])-as.vector(Y[j,]))^2))
}
}
wx = rep(1/mm, mm)
wy = rep(1/nn, nn)
p  = 2
cxy = (dxy^p)
m   = length(wx); ww_m = matrix(wx, ncol=1)
n   = length(wy); ww_n = matrix(wy, nrow=1)
ones_m = matrix(rep(1,n),ncol=1)
ones_n = matrix(rep(1,m),nrow=1)
plan   = CVXR::Variable(m,n)
wd.obj    <- CVXR::Minimize(CVXR::matrix_trace(t(cxy)%*%plan))
wd.const1 <- list(plan >= 0)
wd.const2 <- list(plan%*%ones_m==ww_m, ones_n%*%plan==ww_n)
wd.prob   <- CVXR::Problem(wd.obj, c(wd.const1, wd.const2))
wd.solve  <- CVXR::solve(wd.prob, solver="OSQP")
mm = sample(30:50, 1)
nn = sample(30:50, 1)
X = matrix(rnorm(mm*2, mean=-1),ncol=2)
Y = matrix(rnorm(nn*2, mean=+1),ncol=2)
dxy = array(0,c(mm,nn))
for (i in 1:mm){
for (j in 1:nn){
dxy[i,j] <- sqrt(sum((as.vector(X[i,])-as.vector(Y[j,]))^2))
}
}
wx = rep(1/mm, mm)
wy = rep(1/nn, nn)
p  = 2
cxy = (dxy^p)
m   = length(wx); ww_m = matrix(wx, ncol=1)
n   = length(wy); ww_n = matrix(wy, nrow=1)
ones_m = matrix(rep(1,n),ncol=1)
ones_n = matrix(rep(1,m),nrow=1)
plan   = CVXR::Variable(m,n)
wd.obj    <- CVXR::Minimize(CVXR::matrix_trace(t(cxy)%*%plan))
wd.const1 <- list(plan >= 0)
wd.const2 <- list(plan%*%ones_m==ww_m, ones_n%*%plan==ww_n)
wd.prob   <- CVXR::Problem(wd.obj, c(wd.const1, wd.const2))
wd.solve  <- CVXR::solve(wd.prob, solver="OSQP")
rm(list=ls())
rm(list=ls())
library(T4transport)
devtools::install_github("rendrikson/gwDist")
help(Rglpk)
??Rglpk
install.packages("Rglpk")
library(T4transport)
pkgdown::build_site()
library(T4transport)
pkgdown::build_site()
install.packages("ragg")
install.packages("textshaping")
install.packages("textshaping")
install.packages("ragg")
pkgdown::build_site()
library(reticulate)
help(import)
sys <- import("sys")
sys
sss <- import("pytorch")
sss
class(sss)
sss <- tryCatch(reticulate::import("pytorch"))
sss <- tryCatch({reticulate::import("pytorch")},
error = function(e){
print("not installed")
})
X = matrix(rnorm(10*4),ncol=4)
eigen(cor(X))$values
eigen(cov(X))$values
pyX = reticulate::r_to_py(X)
pyX
library(T4transport)
library(T4transport)
reticulate::py_module_available()
reticulate::py_module_available("ot")
??py_module_available
pkgdown::build_hoem
pkgdown::build_home()
listed = c("numpy","cython","matplotlib","ot")
for (i in listed){
print(i)
}
listed = c("numpy","cython","matplotlib","ot")
for (i in listed){
if (!reticulate::py_module_available(i)){
reticulate::py_install(i, method = method, conda = conda)
}
}
rm(list=ls())
library(T4transport)
X = matrix(rnorm(8*3),ncol=3)
dist1 = dist(X)
dist1
nrow(dist1)
class(dist1)
length(dist1)
library(T4transport)
library(T4transport)
rm(list=ls())
library(T4transport)
m = 40
n = 30
X = dist(matrix(m*3, ncol=3))
Y = dist(matrix(n*3, ncol=3))
gwxy = gw(X, Y)
devtools::document()
library(T4transport)
m = 40
n = 30
X = dist(matrix(m*3, ncol=3))
Y = dist(matrix(n*3, ncol=3))
gwxy = gw(X, Y)
library(T4transport)
m = 40
n = 30
X = dist(matrix(m*3, ncol=3))
Y = dist(matrix(n*3, ncol=3))
gwxy = gw(X, Y)
library(T4transport)
m = 40
n = 30
X = dist(matrix(m*3, ncol=3))
Y = dist(matrix(n*3, ncol=3))
gwxy = gw(X, Y)
library(T4transport)
m = 40
n = 30
X = dist(matrix(m*3, ncol=3))
Y = dist(matrix(n*3, ncol=3))
gwxy = gw(X, Y)
library(T4transport)
m = 40
n = 30
X = dist(matrix(m*3, ncol=3))
Y = dist(matrix(n*3, ncol=3))
gwxy = gw(X, Y)
m = 40
n = 30
X = dist(matrix(m*3, ncol=3))
Y = dist(matrix(n*3, ncol=3))
gwxy = gw(X, Y)
m = 40
n = 30
X = dist(matrix(m*3, ncol=3))
Y = dist(matrix(n*3, ncol=3))
gwxy = gw(X, Y)
gwxy
dim(as.matrix(X))
m = 40
n = 30
X = dist(matrix(m*3, ncol=3))
Y = dist(matrix(n*3, ncol=3))
dim(as.matrix(X))
X
X = dist(matrix(m*3, ncol=3))
X
m = 40
n = 30
X = stats::dist(matrix(m*3, ncol=3))
X
m = 40
n = 30
X = dist(matrix(rnorm(m*3), ncol=3))
Y = dist(matrix(rnorm(n*3), ncol=3))
gwxy = gw(X, Y)
gwxy[[1]]
dim(gwxy[[1]])
gwxy[[2]]$names
gwxy[[2]]
pyrun = gwxy
library(T4transport)
library(T4transport)
library(T4transport)
## SMALL EXAMPLE
m = 20
n = 10
X = matrix(rnorm(m*2, mean=-1),ncol=2) # m obs. for X
Y = matrix(rnorm(n*2, mean=+1),ncol=2) # n obs. for Y
## COMPUTE WITH DIFFERENT ORDERS
out1 = wasserstein(X, Y, p=1)
out2 = wasserstein(X, Y, p=2)
out5 = wasserstein(X, Y, p=5)
## VISUALIZE : SHOW THE PLAN AND DISTANCE
pm1 = paste0("plan p=1; distance=",round(out1$distance,2))
pm2 = paste0("plan p=2; distance=",round(out2$distance,2))
pm5 = paste0("plan p=5; distance=",round(out5$distance,2))
opar <- par(no.readonly=TRUE)
par(mfrow=c(1,3))
image(out1$plan, axes=FALSE, main=pm1)
image(out2$plan, axes=FALSE, main=pm2)
image(out5$plan, axes=FALSE, main=pm5)
par(opar)
m = 40
n = 30
X = dist(matrix(rnorm(m*3), ncol=3))
Y = dist(matrix(rnorm(n*3), ncol=3))
gwxy = gw(X, Y)
library(T4transport)
gwxy = gwD(X, Y)
rm(list=ls())
library(T4transport)
m = 40
n = 30
X = dist(matrix(rnorm(m*3), ncol=3))
Y = dist(matrix(rnorm(n*3), ncol=3))
gwxy = gwD(X, Y)
library(T4transport)
m = 40
n = 30
X = dist(matrix(rnorm(m*3), ncol=3))
Y = dist(matrix(rnorm(n*3), ncol=3))
gwxy = gwD(X, Y)
library(T4transport)
# reticulate::py_install("POT")
library(reticulate)
# py_install("POT")
pot <- import("ot")
np  <- import("numpy")
# data generation in R & convert
nx = 40
ny = 30
Cx = as.matrix(dist(matrix(rnorm(nx*2),ncol=2))); px = matrix(rep(1/nx, nx), ncol=1)
Cy = as.matrix(dist(matrix(rnorm(ny*2),ncol=2))); py = matrix(rep(1/ny, ny), ncol=1)
pCx = reticulate::r_to_py(Cx)
pCy = reticulate::r_to_py(Cy)
ppx = reticulate::r_to_py(px); ppx = ppx$flatten()
ppy = reticulate::r_to_py(py); ppy = ppy$flatten()
output = pot$gromov$gromov_wasserstein(pCx,pCy,ppx,ppy,"square_loss",verbose=TRUE, log=TRUE)
output = pot$gromov$gromov_wasserstein(pCx,pCy,ppx,ppy,"square_loss",verbose=TRUE, log=TRUE, max_iter=100)
output = pot$gromov$gromov_wasserstein(pCx,pCy,ppx,ppy,"square_loss",max_iter=100,verbose=TRUE, log=TRUE)
output = pot$gromov$gromov_wasserstein(pCx,pCy,ppx,ppy,"square_loss",armijo=TRUE,max_iter=100,verbose=TRUE, log=TRUE)
output = pot$gromov$gromov_wasserstein(pCx,pCy,ppx,ppy,"square_loss",armijo=TRUE,verbose=TRUE, log=TRUE)
output[[1]]
dim(output[[1]])
output[[2]]$gw_dist
output = pot$gromov$gromov_wasserstein(pCx,pCy,ppx,ppy,"square_loss",armijo=FALSE,verbose=TRUE, log=TRUE)
output[[2]]$gw_dist
rm(list=ls())
library(T4transport)
library(T4transport)
m = 40
n = 30
X = dist(matrix(rnorm(m*3), ncol=3))
Y = dist(matrix(rnorm(n*3), ncol=3))
gwxy = gwD(X, Y)
gwxy$distance
gwxy = gwD(X, Y, armijo = TRUE)
gwxy$distance
rm(list=ls())
## SMALL EXAMPLE
m = 20
n = 10
X = matrix(rnorm(m*2, mean=-1),ncol=2) # m obs. for X
Y = matrix(rnorm(n*2, mean=+1),ncol=2) # n obs. for Y
## COMPUTE WITH DIFFERENT COST
out.sq = gw(X, Y, loss="Square")
out.kl = gw(X, Y, loss="kl")
plot(rbind(X,Y), col=c(rep(1,m),rep(2,n)), pch=19, main="data")
plot(rbind(X,Y), col=c(rep(2,m),rep(4,n)), pch=19, main="data")
## SMALL EXAMPLE
m = 20
n = 10
X = matrix(rnorm(m*2, mean=-1),ncol=2) # m obs. for X
Y = matrix(rnorm(n*2, mean=+1),ncol=2) # n obs. for Y
## COMPUTE WITH DIFFERENT COST
out.sq = gw(X, Y, loss="Square")
out.kl = gw(X, Y, loss="kl")
## VISUALIZE : SHOW THE PLAN AND DISTANCE
pm.sq = paste0("Square loss; dist=",round(out.sq$distance,4))
pm.kl = paste0("KL loss; dist=",round(out.kl$distance,4))
opar <- par(no.readonly=TRUE)
par(mfrow=c(1,3))
plot(rbind(X,Y), col=c(rep(2,m),rep(4,n)), pch=19, main="data")
image(out.sq$plan, axes=FALSE, main=pm.sq)
image(out.kl$plan, axes=FALSE, main=pm.kl)
par(opar)
## SMALL EXAMPLE
m = 20
n = 10
X = matrix(rnorm(m*2, mean=-1),ncol=2) # m obs. for X
Y = matrix(rnorm(n*2, mean=+1),ncol=2) # n obs. for Y
## COMPUTE WITH DIFFERENT COST
out.sq = gw(X, Y, loss="Square")
out.kl = gw(X, Y, loss="kl")
## VISUALIZE : SHOW THE PLAN AND DISTANCE
pm.sq = paste0("Square loss; dist=",round(out.sq$distance,4))
pm.kl = paste0("KL loss; dist=",round(out.kl$distance,4))
opar <- par(no.readonly=TRUE)
par(mfrow=c(1,3))
plot(rbind(X,Y), col=c(rep(2,m),rep(4,n)), pch=19, main="data")
image(out.sq$plan, axes=FALSE, main=pm.sq)
image(out.kl$plan, axes=FALSE, main=pm.kl)
par(opar)
## SMALL EXAMPLE
m = 20
n = 10
X = matrix(rnorm(m*2, mean=-1),ncol=2) # m obs. for X
Y = matrix(rnorm(n*2, mean=+1),ncol=2) # n obs. for Y
## COMPUTE WITH DIFFERENT COST
out.sq = gw(X, Y, loss="Square")
out.kl = gw(X, Y, loss="kl")
## VISUALIZE : SHOW THE PLAN AND DISTANCE
pm.sq = paste0("Square loss; dist=",round(out.sq$distance,4))
pm.kl = paste0("KL loss; dist=",round(out.kl$distance,4))
opar <- par(no.readonly=TRUE)
par(mfrow=c(1,3))
plot(rbind(X,Y), col=c(rep(2,m),rep(4,n)), pch=19, main="data")
image(out.sq$plan, axes=FALSE, main=pm.sq)
image(out.kl$plan, axes=FALSE, main=pm.kl)
par(opar)
## SMALL EXAMPLE
m = 20
n = 10
X = matrix(rnorm(m*2, mean=-1),ncol=2) # m obs. for X
Y = matrix(rnorm(n*2, mean=+1),ncol=2) # n obs. for Y
## COMPUTE WITH DIFFERENT COST
out.sq = gw(X, Y, loss="Square")
out.kl = gw(X, Y, loss="kl")
## VISUALIZE : SHOW THE PLAN AND DISTANCE
pm.sq = paste0("Square loss; dist=",round(out.sq$distance,4))
pm.kl = paste0("KL loss; dist=",round(out.kl$distance,4))
opar <- par(no.readonly=TRUE)
par(mfrow=c(1,3))
plot(rbind(X,Y), col=c(rep(2,m),rep(4,n)), pch=19, main="data")
image(out.sq$plan, axes=FALSE, main=pm.sq)
image(out.kl$plan, axes=FALSE, main=pm.kl)
par(opar)
m = sample(50:100, 1)
n = sample(50:100, 1)
X = matrix(rnorm(m*2, mean=-1),ncol=2) # m obs. for X
Y = matrix(rnorm(n*2, mean=+1),ncol=2) # n obs. for Y
## COMPUTE WITH DIFFERENT COST
out.sq = gw(X, Y, loss="Square")
out.kl = gw(X, Y, loss="kl")
## VISUALIZE : SHOW THE PLAN AND DISTANCE
pm.sq = paste0("Square loss; dist=",round(out.sq$distance,4))
pm.kl = paste0("KL loss; dist=",round(out.kl$distance,4))
opar <- par(no.readonly=TRUE)
par(mfrow=c(1,3))
plot(rbind(X,Y), col=c(rep(2,m),rep(4,n)), pch=19, main="data")
image(out.sq$plan, axes=FALSE, main=pm.sq)
image(out.kl$plan, axes=FALSE, main=pm.kl)
par(opar)
m = sample(50:100, 1)
n = sample(50:100, 1)
X = matrix(rnorm(m*2, mean=-1),ncol=2) # m obs. for X
Y = matrix(rnorm(n*2, mean=+1),ncol=2) # n obs. for Y
## COMPUTE WITH DIFFERENT COST
out.sq = gw(X, Y, loss="Square")
out.kl = gw(X, Y, loss="kl")
## VISUALIZE : SHOW THE PLAN AND DISTANCE
pm.sq = paste0("Square loss; dist=",round(out.sq$distance,4))
pm.kl = paste0("KL loss; dist=",round(out.kl$distance,4))
opar <- par(no.readonly=TRUE)
par(mfrow=c(1,3))
plot(rbind(X,Y), col=c(rep(2,m),rep(4,n)), pch=19, main="data")
image(out.sq$plan, axes=FALSE, main=pm.sq)
image(out.kl$plan, axes=FALSE, main=pm.kl)
par(opar)
m = sample(50:100, 1)
n = sample(50:100, 1)
X = matrix(rnorm(m*2, mean=-1),ncol=2) # m obs. for X
Y = matrix(rnorm(n*2, mean=+1),ncol=2) # n obs. for Y
## COMPUTE WITH DIFFERENT COST
out.sq = gw(X, Y, loss="Square")
out.kl = gw(X, Y, loss="kl")
## VISUALIZE : SHOW THE PLAN AND DISTANCE
pm.sq = paste0("Square loss; dist=",round(out.sq$distance,4))
pm.kl = paste0("KL loss; dist=",round(out.kl$distance,4))
opar <- par(no.readonly=TRUE)
par(mfrow=c(1,3))
plot(rbind(X,Y), col=c(rep(2,m),rep(4,n)), pch=19, main="data")
image(out.sq$plan, axes=FALSE, main=pm.sq)
image(out.kl$plan, axes=FALSE, main=pm.kl)
par(opar)
m = sample(50:100, 1)
n = sample(50:100, 1)
X = matrix(rnorm(m*2, mean=-1),ncol=2) # m obs. for X
Y = matrix(rnorm(n*2, mean=+1),ncol=2) # n obs. for Y
## COMPUTE WITH DIFFERENT COST
out.sq = gw(X, Y, loss="Square")
out.kl = gw(X, Y, loss="kl")
## VISUALIZE : SHOW THE PLAN AND DISTANCE
pm.sq = paste0("Square loss; dist=",round(out.sq$distance,4))
pm.kl = paste0("KL loss; dist=",round(out.kl$distance,4))
opar <- par(no.readonly=TRUE)
par(mfrow=c(1,3))
plot(rbind(X,Y), col=c(rep(2,m),rep(4,n)), pch=19, main="data")
image(out.sq$plan, axes=FALSE, main=pm.sq)
image(out.kl$plan, axes=FALSE, main=pm.kl)
par(opar)
m = sample(50:100, 1)
n = sample(50:100, 1)
X = matrix(rnorm(m*2, mean=-1),ncol=2) # m obs. for X
Y = matrix(rnorm(n*2, mean=+1),ncol=2) # n obs. for Y
## COMPUTE WITH DIFFERENT COST
out.sq = gw(X, Y, loss="Square")
out.kl = gw(X, Y, loss="kl")
## VISUALIZE : SHOW THE PLAN AND DISTANCE
pm.sq = paste0("Square loss; dist=",round(out.sq$distance,4))
pm.kl = paste0("KL loss; dist=",round(out.kl$distance,4))
opar <- par(no.readonly=TRUE)
par(mfrow=c(1,3))
plot(rbind(X,Y), col=c(rep(2,m),rep(4,n)), pch=19, main="data")
image(out.sq$plan, axes=FALSE, main=pm.sq)
image(out.kl$plan, axes=FALSE, main=pm.kl)
par(opar)
rm(list=ls())
library(T4transport)
if (reticulate::py_module_available("ot")){
## SMALL EXAMPLE
m = sample(50:100, 1)
n = sample(50:100, 1)
X = matrix(rnorm(m*2, mean=-1),ncol=2) # m obs. for X
Y = matrix(rnorm(n*2, mean=+1),ncol=2) # n obs. for Y
xyloc = rbind(X, Y)
xycol = c(rep(2,m),rep(4,n))
## COMPUTE WITH DIFFERENT COST
out.sq = gw(X, Y, loss="Square")
out.kl = gw(X, Y, loss="kl")
## VISUALIZE : SHOW THE PLAN AND DISTANCE
pm.sq = paste0("Square loss; dist=",round(out.sq$distance,4))
pm.kl = paste0("KL loss; dist=",round(out.kl$distance,4))
opar <- par(no.readonly=TRUE)
par(mfrow=c(1,3))
plot(xyloc, col=xycol, pch=19, main="data")
image(out.sq$plan, axes=FALSE, main=pm.sq)
image(out.kl$plan, axes=FALSE, main=pm.kl)
par(opar)
} else {
print("No POT module detected. Use 'install_pot()' to run this example.")
}
help(gw)
library(T4transport)
library(T4transport)
rm(list=ls())
library(T4transport)
library(T4transport)
library(T4transport)
X
Y
X = matrix(rnorm(m*2, mean=-1),ncol=2) # m obs. for X
Y = matrix(rnorm(n*2, mean=+1),ncol=2) # n obs. for Y
m = sample(50:100, 1)
n = sample(50:100, 1)
X = matrix(rnorm(m*2, mean=-1),ncol=2) # m obs. for X
Y = matrix(rnorm(n*2, mean=+1),ncol=2) # n obs. for Y
m = 10
n = 5
X = matrix(rnorm(m*2, mean=-1),ncol=2) # m obs. for X
Y = matrix(rnorm(n*2, mean=+1),ncol=2) # n obs. for Y
DX = as.matrix(dist(X))
DY = as.matrix(dist(Y))
hey = c(DX, DY)
hey
library(T4transport)
library(T4transport)
rm(list=ls())
library(T4transport)
pkgdown::build_site()
library(T4transport)
library(T4transport)
pkgdown::build_site()
library(T4transport)
pkgdown::build_site()
pkgdown::build_site()
library(T4transport)
install.packages("greta")
library(T4transport)
library(T4transport)
library(T4transport)
